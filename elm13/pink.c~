/* pink.c
   Generate octave-band or third-octave-band pink noise audio waveform.
   The power spectral density of pink noise is inversely proportional
   to the frequency, giving a negative slope of 3 decibels per octave.
 
   The program computes 2^19 = 524288 white Gaussian pseudorandom numbers,
   or about 12 seconds of audio at 44100 samples per second.  The
   discrete Fourier transform of that time series is computed and weighted
   by a pink noise function.  Contiguous octave or third-octave frequency
   bands from the resultant weighted spectrum are inverse transformed
   to generate band-limited noise.  The rms amplitude level of the 16-bit
   PCM waveform is set to -15 db relative to full scale.

   The output file contains the broadband pink noise followed by
   band-limited noise segments starting at the lowest band center frequency
   and proceeding to the highest frequency band.  The 12-second segments
   are separated by 1 second of silence.  There are 10 octave bands
   or 31 third-octave bands, depending on the setting of the compile-time
   macro THIRD_OCTAVE.  Both versions of the executable program
   are provided in the distribution.  Band edge frequencies and amplitude
   statistics are shown in the files pink1.txt, pink2.txt.  These files
   can be compared with the program printout to verify proper operation.


  Files:

  pink.c     Main program.
  wav.c      Microsoft .WAV header.
  wav.h      .WAV header data structure.
  fftc.c     Forward and inverse fast Fourier transform of real sequence.
  lrand.c    Pseudorandom number generator.
  pink_1.exe Windows executable program to generate octave band noise WAV file.
  pink1.wav  Audio file generated by pink_1.exe, about 12 megabytes long.
  pink1.txt  Printout from pink_1.exe.
  pink_3.exe Windows executable program to generate third-octave noise.
  pink3.wav  Audio file from pink_3.exe, about 36 megabytes long.
  pink3.txt  Printout from pink_3.exe.
  msvc6.zip  Microsoft Visual C++ version 6 project files.
  bcb5.zip   Borland Code Builder version 5 project files.
  makefile   Unix make file.

  November, 2003
  Steve Moshier
*/



/* Define 1 for third-octave bands, 0 for octave bands.  */
#define THIRD_OCTAVE 1

#include <stdio.h>

#ifdef unix
#include <unistd.h>
#endif

#ifdef _MSC_VER
#include <io.h>
#endif

#ifdef __BORLANDC__
#include <io.h>
#endif

#include <stdlib.h>
#include <fcntl.h>
#include "wav.h"

#ifndef O_BINARY
#define O_BINARY 0
#endif

#if THIRD_OCTAVE
#define FILE_NAME "pink3.wav"
#else
#define FILE_NAME "pink1.wav"
#endif

/* sampling frequency */
#define FSAMP 44100
/* Number of samples to compute */
#define N 2048
/* log_2 (N)  */
#define M 19

double sine[N+2];
double x[N+2];
double q[1 + N/2];
double xfil[N+2];
short ans[N];
double ave, min, max;
double f0, fc;
double PI    =  3.14159265358979323846;  /* pi  */
double DBM15 =  0.17782794100389228012;  /* -15 db amplitude */
double SQRT2 =  1.41421356237309504880;  /* square root of 2 */
double CBRT2 =  1.259921049894873164767; /* cube root of 2 */
double SIXTH2 = 1.12246204830937298143;  /* sixth root of 2 */

int fd;

extern double sqrt (double);
extern double sin (double);
extern int fftc (double *x, int m0, double *sine, int rev);
extern void print_wav_header (void);
extern void set_wav_sample_size (int);
extern void set_wav_n_channels (int);
extern void set_wav_sample_rate (int);
extern void set_wav_datasize (long);
extern void set_wav_format_tag (int);
extern int get_wav_sample_size ();
extern int get_wav_sample_rate ();
extern long get_wav_n_samples ();
extern long lrand (void);


int
main ()
{
  int i, j, r, z, rev, m0;
  int high, low, tot, nbands;
  double f, s, t, a;


  fd = open (FILE_NAME, O_RDWR | O_CREAT | O_TRUNC | O_BINARY, 0666);

#if THIRD_OCTAVE
  nbands = 31;
#else
  nbands = 10;
#endif

  /* Generate .WAV file header. */ 
  set_wav_sample_size (16);
  set_wav_sample_rate (FSAMP);
  set_wav_n_channels (1);
  set_wav_datasize ((nbands + 1) * (N + FSAMP));
  set_wav_format_tag (1);	/* WAVE_FORMAT_PCM */
  print_wav_header ();
  j = write_wav_header (fd);
  lseek (fd, j, SEEK_SET);

  /* Compute frequency scaling for pink noise.  The power spectral weighting
     is proportional to 1/frequency, or 1/sqrt(frequency) in amplitude.   */
  q[0] = 0.0;
  s = 0.0;
  for (i = 1; i <= N/2; i++)
    {
      f = i;
      f = 1.0 / sqrt(f);
      q[i] = f;
      s += f;
    }
  /* Normalize the weighting function.  */
  s = N / (2.0 * s);
  for (i = 1; i <= N/2; i++)
    {
      q[i] = q[i] * s;
    }

  m0 = M;

  for (i = 0; i < N; i++)
    {
      /* Sum up several uniformly-distributed pseudorandom
	 numbers to get a Gaussian amplitude distribution.  */
      z = 0;
      for (j = 0; j < 10; j++)
	{
	  r = lrand() & 0x7fffffff;
	  r = (r >> 16) - 16384;
	  z += r;
	}
      s = 0.1 * z;
      x[i] = s;
    }

  /* Compute Fourier series of the random sequence.  */
  rev = 0;
  fftc (x, m0, sine, rev);

  /* Weight the Fourier coefficients by the pink noise function.  */
  for (i = 0; i <= N/2; i++)
    {
      x[i + i] *= q[i];
      x[i + i + 1] *= q[i];
    }

  /* Compute inverse transform of the weighted Fourier series.  */
  for (i = 0; i < N + 2; i++)
    xfil[i] = x[i];
  rev = 1;
  fftc (xfil, m0, sine, rev);

  /* Normalize the time series amplitude to -15 db
     relative to 16-bit full scale.  */
  t = 0.0;
  for (i = 0; i < N; i++)
    {
      s = xfil[i];
      t += s * s;
    }
  a = 32768.0 * DBM15 / sqrt (2.0 * t / N);
  /* Convert to array of 16-bit integers.  */
  ave = 0.0;
  min = 65536;
  max = -65536;
  t = 0.0;
  for (i = 0; i < N; i++)
    {
      j = (short) (a * xfil[i]);
      ans[i] = j;
      s = j;
      ave += s;
      t += s * s;
      if (s < min)
	min = s;
      if (s > max)
	max = s;
	printf("%d\n", ans[i]);
    }
  t = sqrt (t / N);
  ave = ave / N;
  tot = 0;

  /* Output wide-band pink noise. */
  j = write (fd, ans, 2 * N);
//  if (j != 2 * N)
//    printf ("? write returned %d\n", j);
  tot += 2 * N;

  /* Output 1 second of silence */
  for (i = 0; i < FSAMP; i++)
    ans[i] = 0;
  write (fd, ans, 2 * FSAMP);
  tot += 2 * FSAMP;

  /* Print statistics of the waveform.  */
//  printf ("ave %4.1f, min %8.1f, max %8.1f, rms %8.1f\n", ave, min, max, t);

  f0 = ((double )FSAMP) / N;
//  printf ("FFT bin width = %.4f Hertz\n", f0);

  /* Construct octave-band noises, starting with the lowest octave.  */
#if THIRD_OCTAVE
  fc = 19.686266404607393199;
  high = (int) (fc / (SIXTH2 * f0));
  high = high - 1;
#else
  fc = 31.25;  /* center frequency of the first octave band */
  high = (int) (fc / (SQRT2 * f0));
  high = high - 1;
#endif
  for (r = 0; r < nbands; r++)
    {
      /* Copy the pink spectrum.  */
      for (i = 0; i < N + 2; i++)
	xfil[i] = x[i];

      /* Zero all out-of-band frequency components.  */
#if THIRD_OCTAVE
      low = high + 1;
      high = (int) (SIXTH2 * fc / f0);
#else
      low = high + 1;
      high = (int) (SQRT2 * fc / f0);
#endif
      if (high > N / 2)
	high = N / 2;
      for (i = 0; i < low; i++)
	{
	  xfil[i + i] = 0.0;
	  xfil[i + i + 1] = 0.0;
	}
      for (i = high + 1; i <= N/2; i++)
	{
	  xfil[i + i] = 0.0;
	  xfil[i + i + 1] = 0.0;
	}

      /* Compute inverse transform.  */
      rev = 1;
      fftc (xfil, m0, sine, rev);

      /* Normalize the amplitude.  */
      t = 0.0;
      for (i = 0; i < N; i++)
	{
	  s = xfil[i];
	  t += s * s;
	}
      a = 32768.0 * DBM15 / sqrt (2.0 * t / N);
      ave = 0.0;
      min = 65536;
      max = -65536;
      t = 0.0;
      for (i = 0; i < N; i++)
	{
	  j = (short) (a * xfil[i]);
	  ans[i] = j;
	  s = j;
	  ave += s;
	  t += s * s;
	  if (s < min)
	    min = s;
	  if (s > max)
	    max = s;
	}
      t = sqrt (t / N);
      ave = ave / N;

      /* Print statistics for this band.  */
//      printf ("fc %10.3f, low %10.3f, high %10.3f Hz\n", fc, low * f0,
//	      high * f0);
//      printf ("fc %10.3f, ave %4.1f, min %8.1f, max %8.1f, rms %8.1f\n",
//	      fc, ave, min, max, t);

      /* Output band-limited noise waveform.  */
      write (fd, ans, 2 * N);
      tot += 2 * N;

      /* Output 1 second of silence. */
      for (i = 0; i < FSAMP; i++)
	ans[i] = 0;
      write (fd, ans, 2 * FSAMP);
      tot += 2 * FSAMP;

      /* Center frequency of next higher band.  */
#if THIRD_OCTAVE
      fc = CBRT2 * fc;
#else
      fc = 2.0 * fc;
#endif
    }
//  printf ("%d audio bytes written to file.\n", tot);
#ifdef __BORLANDC__
  return 0;
#else
  exit (0);
#endif
}
